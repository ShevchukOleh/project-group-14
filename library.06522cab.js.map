{"mappings":"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","sources":["src/js/search-by-keyword.js"],"sourcesContent":["import Pagination from 'tui-pagination';\nimport 'tui-pagination/dist/tui-pagination.css';\nimport { spinnerOn, spinnerOff } from './spinner';\n\nconst searchFormEl = document.querySelector('.nav__form');\nconst inputEl = document.querySelector('.nav__input');\nconst moviesEl = document.querySelector('.films');\nconst errorEl = document.querySelector('.header__error');\nconst container = document.getElementById('tui-pagination-container');\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c88bf135aa4e0b79b7c68835bd77599c';\nconst NO_POSTER = `https://i.ibb.co/r76r6Vt/oie-30214851-Ms-Wl-PTS0.png`;\n\nfunction setScrollToUp() {\n  window.scrollTo({\n    top: 0,\n    behavior: 'smooth',\n  });\n}\n\nconst state = {\n  currentPage: 1,\n  totalPages: 0,\n  activeFilm: null,\n  query: null,\n  whatPaginated: null,\n  whatchedOrQueue: null,\n};\n\nasync function fetchGenres() {\n  const url = new URL(`${BASE_URL}/genre/movie/list`);\n  url.searchParams.append('api_key', API_KEY);\n\n  const response = await fetch(url);\n  const data = await response.json();\n  return data.genres;\n}\n\nfunction getGenres(arrayId, genres) {\n  const arr = [];\n\n  for (const value of genres) {\n    if (arrayId === 'N/A' || arrayId.length === 0) {\n      arr.push('Other');\n      break;\n    } else if (arrayId.includes(value.id)) {\n      arr.push(value.name);\n    }\n  }\n\n  if (arr.length > 2) {\n    arr.splice(2, arr.length - 2, 'Other');\n  }\n\n  return arr.join(', ');\n}\n\nasync function fetchMoviesByQuery(query, page) {\n  const url = new URL(`${BASE_URL}/search/movie`);\n  url.searchParams.append('api_key', API_KEY);\n  url.searchParams.append('query', query);\n  url.searchParams.append('page', page);\n\n  const response = await fetch(url);\n  const data = await response.json();\n  // console.log(data);\n  return data;\n}\n\nsearchFormEl.addEventListener('submit', e => {\n  e.preventDefault();\n  spinnerOn();\n  const query = inputEl.value;\n  let page = 1;\n\n  fetchMoviesByQuery(query, page).then(res => {\n    const { results } = res;\n    state.results = results;\n\n    if (inputEl.value.trim() === '') {\n      spinnerOff();\n      errorEl.style.display = 'block';\n      return;\n    }\n\n    if (state.results.length === 0) {\n      spinnerOff();\n      errorEl.style.display = 'block';\n      return;\n    }\n\n    if (inputEl.value.trim()) {\n      spinnerOff();\n      errorEl.style.display = 'none';\n      moviesEl.innerHTML = '';\n      container.style.display = 'none';\n\n      fetchMoviesByQuery(query, page)\n        .then(res => {\n          const { results, total_pages } = res;\n          state.totalPages = total_pages;\n\n          if (state.totalPages > 1) {\n            spinnerOff();\n            return renderGallery(results);\n          }\n        })\n        .then(res => {\n          moviesEl.innerHTML = res;\n          spinnerOff();\n        });\n\n      fetchMoviesByQuery(query, page).then(data => {\n        const total = data.total_results;\n        const pagination = new Pagination('pagination', {\n          totalItems: total,\n          itemsPerPage: 20,\n          visiblePages: 5,\n          page: 1,\n        });\n        pagination.on('afterMove', event => {\n          setScrollToUp();\n          const { page } = event;\n          fetchMoviesByQuery(query, page)\n            .then(res => {\n              const { results, total_pages } = res;\n              state.totalPages = total_pages;\n\n              if (state.totalPages > 1) {\n                return renderGallery(results);\n              }\n            })\n            .then(res => {\n              moviesEl.innerHTML = res;\n            });\n\n          // console.log(page);\n        });\n      });\n    }\n  });\n});\n\nasync function renderGallery(movies) {\n  const genres = await fetchGenres();\n  return movies\n    .map(\n      ({\n        poster_path,\n        title,\n        release_date,\n        genre_ids,\n        original_title,\n        id,\n      } = movies) => {\n        const poster = poster_path\n          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n          : NO_POSTER;\n        const releaseYear = release_date\n          ? release_date.split('-')[0]\n          : 'Unknown';\n        const checkGenres = genre_ids\n          ? getGenres(genre_ids, genres)\n          : 'Unknown';\n        return `<li class=\"films__item\" data-mvid='${id}'>\n                  <div class=\"films__img\">\n                    <img src=${poster} alt='Poster ${original_title} 'data-mvid='${id}' loading='lazy' />\n                  </div>\n                  <div class=\"films__description\" data-mvid='${id}'>\n                    <p class=\"films__title\" data-mvid='${id}'>\n                      <b data-mvid='${id}'>${title.toUpperCase()}</b>\n                    </p>\n                    <div class=\"films__meta\" data-mvid='${id}'>\n                      <p class=\"films__genres\" data-mvid='${id}'>${checkGenres}</p>\n                      <p class=\"films__data\" data-mvid='${id}'>${releaseYear}</p>\n                    </div>\n                  </div>\n                </li>`;\n      }\n    )\n    .join('');\n}\n"],"names":["$1VFfL","parcelRequire","$ffc2dcc44f21eabb$var$searchFormEl","document","querySelector","$ffc2dcc44f21eabb$var$inputEl","$ffc2dcc44f21eabb$var$moviesEl","$ffc2dcc44f21eabb$var$errorEl","$ffc2dcc44f21eabb$var$container","getElementById","$ffc2dcc44f21eabb$var$API_KEY","$ffc2dcc44f21eabb$var$state","currentPage","totalPages","activeFilm","query","whatPaginated","whatchedOrQueue","async","$ffc2dcc44f21eabb$var$fetchMoviesByQuery","page","url","URL","searchParams","append","response","fetch","json","$ffc2dcc44f21eabb$var$renderGallery","movies","genres","$ffc2dcc44f21eabb$var$fetchGenres","map","poster_path","title","release_date","genre_ids","original_title","id","poster","releaseYear","split","checkGenres","arrayId","arr","value","length","push","includes","name","splice","join","$ffc2dcc44f21eabb$var$getGenres","toUpperCase","addEventListener","e","preventDefault","$j1lrD","spinnerOn","then","res1","results","results1","trim","spinnerOff","style","display","innerHTML","res","total_pages","data","total","total_results","$parcel$interopDefault","totalItems","itemsPerPage","visiblePages","on","event","window","scrollTo","top","behavior"],"version":3,"file":"library.06522cab.js.map"}